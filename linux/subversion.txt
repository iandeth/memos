http://svnbook.red-bean.com/index.en.html

* Subversion's Features (compared to CVS)
file:///svn.intro.whatis.html#svn.intro.features
file:///svn.forcvs.html

* Recommended repository layout
file:///svn.tour.importing.html#svn.tour.importing.layout

    $ svn list file:///usr/local/svn/repos
    /trunk
    /branches
    /tags


* Broken .svn
If you accidentally remove the .svn  subdirectory, the easiest way to fix the problem is to remove the entire containing directory (a normal system deletion, not svn delete), then run svn update from a parent directory. The Subversion client will re-download the directory you've deleted, with a new .svn area as well.
file:///svn.tour.initial.html


* Authenticating as a Different User
pass the --username option on the commandline and Subversion will attempt to authenticate as that user, prompting you for a password if necessary.
file:///svn.tour.initial.html


* Symbolic links on Windows
On Windows systems, Subversion simply creates a regular text file whose contents are the path to which to the original symlink pointed. While that file can't be used as a symlink on a Windows system, it also won't prevent Windows users from performing their other Subversion-related activities.
file:///svn.tour.cycle.html


* svn status to see server repos updates

    $ svn status -u

None of the prior invocations to svn status contact the repository instead, they compare the metadata in the .svn directory with the working copy. Finally, there is the --show-updates (-u)  option, which contacts the repository and adds information about things that are out-of-date.
file:///svn.tour.cycle.html


* revision number aliases
$ svn log -r HEAD|PREV|BASE|COMITTED|{2007-11-14}
file:///svn.tour.revs.specifiers.html


* to fully apply a patch generated by svn diff, any property modifications will need to be applied by hand.
file:///svn.advanced.props.html


* ignoring files
Subversion provides two ways for telling it which files you would prefer that it simply disregard. One of the ways involves the use of Subversion's runtime configuration system (see the section called ÅgRuntime Configuration AreaÅh). The other way makes use of Subversion's directory property support.
file:///svn.advanced.props.special.ignore.html

    # global setting
    $ vi .subversion/config
    [miscellany]
    global-ignores = *.swp *.bak
    
    # manually set
    $ svn propedit svn:ignore dir
    *.swp *.bak

    # show ignored files too
    $ svn status --no-ignore


* Keyword substitution - eg: $Rev$, $Date$
file:///svn.advanced.props.special.keywords.html

    # to enable keyword substitution on file
    $ svn propset svn:keywords "Rev Date" myfile.txt


* Subversion's lock-modify-unlock model
file:///svn.advanced.locking.html

    # lock a file
    $ svn lock banana.jpg -m 'changing color'

    # local stat with K (locKed)
    $ svn status
      K banana.jpg

    # on other people's stat (O for Other)
    $ svn status -u
      O         32   banana.jpg

    # unlock file manually
    $ svn unlock banana.jpg

    # will unlock everything on commit,
    $ svn commit
    # but can say not to unlock
    $ svn commit --no-unlock

    # breaking other people's lock
    $ svn unlock file://localhost/svn/banana.jpg --force
    # stat of original lock person
    # (B for Broken, T for sTolen [relocked])
    $ svn status -u
      B         32 banana.jpg or
      T         32 banana.jpg

    # set lock reminder, before editing
    # this will make banana.jpg a read-only file
    # unless a svn lock procedure
    $ svn propset svn:needs-lock 1 *.jpg


* Externals Definitions
checkout sub-directory sources from other svn repositories. To do so, use svn:externals property.
file:///svn.advanced.externals.html

    $ svn propedit svn:externals myproj/
    ex-libs       http://other.com/svn/lib
    commons  -r21 http://another.com/svn/common

An externals definition can only point to directories, not files. Committing on the primary working copy will not recurse into any external ones.


* make users enter password at each commit, for security
file:///svn.serverconfig.netmodel.html

    $ vi .subversion/config
    [auth]
    store-auth-creds = no


* make a branch (copy)
file:///svn.branchmerge.using.html

    # update svn info
    $ svn update
    # create branch
    $ svn copy svn://calc/trunk \
    svn://calc/branches/my-calc-branch

Subversion does not support copying between different repositories. When using URLs with svn copy or svn move, you can only copy items within the same repository.

* change local to some previous revision

    $ svn merge -rHEAD:291 .

* merge changes from trunk
file:///svn.branchmerge.copychanges.html

    # see if there's any updates in trunk that
    # needs to be merged:
    $ cd branches/my-calc-branch
    $ svn merge --dry-run -r 344 svn://calc/trunk
    U   integer.c

    # apply merge to working copy
    $ svn merge -r 344 svn://calc/trunk
    U   integer.c

    # if bad or confused, revert to your original
    $ svn revert --recursive .

    # commit changes to your branch
    # make sure to log message
    $ svn commit -m 'integer.c: ported -r344'

This procedure is called "porting" in subversion.
svn merge surpasses the 'patch' command, by expressing changes in tree structure and properties by directly applying them to your working copy. patch command can't handle these.
Always remember to do your merge into a working copy that has no local edits and has been recently updated.



* merges and moves - be carefull!
Watch out for file/directory renaming or moving on branches, and then merging to trunk. This will not work if some changes to trunk old-name file were applied. The problem is that Subversion's update  command isn't as robust as it should be, particularly when dealing with copy and move operations.
bashi memo: and changing directory and file names on trunk while branch existing, will break on merging. do not change dir/file names on trunk!
file:///svn.branchmerge.copychanges.html#svn.branchmerge.copychanges.bestprac.moves


* show log only for branch chanegs
file:///svn.branchmerge.commonuses.html

    $ svn log --stop-on-copy

useful for finding out from which revision the branch copy started.


* merge changes from trunk (from local brache)

    # make branch from local trunk
    $ cd branches
    $ svn copy ../trunk my-calc-branch
    ... edit branch code ...
    $ svn ci .
    updated revision 256.

    # and now merge to trunk
    $ cd trunk
    $ svn update
    $ svn log --stop-on-copy ../branches/my-calc-branch
    ... 
    r255.

    # use that revision - 1 value
    $ svn merge -r254:HEAD ../barnches/my-calc-branch

I still don't know why, but merging from local-trunk-copied-branches
needs 'revision when copied' - 1 value.


* merge branch changes back into trunk

    $ svn log --stop-on-copy svn:///myrepos/mybranch
    r341 ...
    $ cd myrepos/trunk
    $ svn update
    At revision 405.
    $ svn merge -r 341:405 svn:///myrepos/mybranch
    U   integer.c
    U   button.c

bashi memo: you must specify -r N:M revision number to `svn merge`, and the target source code will be merged as it existed in revisifrom N to M. you can say 341:HEAD, too.
file:///svn.branchmerge.commonuses.html


* hook's permission
Subversion executes hooks as the same user who owns the process which is accessing the Subversion repository.
file:///svn.reposadmin.create.html


* svnserve.conf example - used only with svnserve

    [general]
    password-db = svnserve.userfile
    realm = example realm
    # access controls [read|write|none]
    anon-access = read
    auth-access = write
    # or Specific access rules for specific locations
    #authz-db = authzfile


* svnserve.userfile example

    [users]
    harry = foopassword
    sally = barpassword


* httpd.conf mod_dav_svn example - with basic authentication

    LoadModule dav_module     modules/mod_dav.so
    LoadModule dav_svn_module modules/mod_dav_svn.so
    <Location /repos>
      DAV svn
      # any "/svn/foo" URL will map to a repository /usr/local/svn/foo
      SVNParentPath /usr/local/svn
      # to see all repos with mod_dir
      SVNListParentPath on
      # basic authentication
      AuthType Basic
      AuthName "Subversion repository"
      AuthUserFile /etc/svn-auth-file
      # read-only for all, auth needed for commit's
      <LimitExcept GET PROPFIND OPTIONS REPORT>
        Require valid-user
      </LimitExcept>
    </Location>


* httpd + basic authentication
use htpasswd to create user:

    $ htpasswd -cm /etc/svn-auth-file harry


* httpd.conf mod_dav_svn example - with mod_authz_svn module
This will give a path based finger-grained authorization:

    LoadModule authz_svn_module modules/mod_authz_svn.so
    <Location /repos>
      DAV svn
      SVNParentPath /usr/local/svn
      # our access control policy
      AuthzSVNAccessFile /path/to/authzfile
      # try anonymous access first, resort to real
      # authentication if necessary.
      Satisfy Any
      Require valid-user
      # how to authenticate a user
      AuthType Basic
      AuthName "Subversion repository"
      AuthUserFile /path/to/users/file
    </Location>


* authzfile example
file:///svn.serverconfig.pathbasedauthz.html

    [calc:/branches/calc/bug-142]
    harry = rw
    sally = r
    # give everyone read access to all repos
    [/]
    * = r
    # group setting
    [groups]
    calc-developers = harry, sally, joe
    # group access
    [calc:/projects/calc]
    @calc-developers = rw


* httpd.conf custom logging
CustomLog logs/svn_logfile "%t %u %{SVN-ACTION}e" env=SVN-ACTION


* mod_dav_svn autoversioning
When SVNAutoversioning is active, write requests from WebDAV clients result in automatic commits. The use case for this feature can be incredibly appealing to administrators working with non-technical users: imagine an office of ordinary users running Microsoft Windows or Mac OS. Each user ÅgmountsÅh the Subversion repository, which appears to be an ordinary network folder. They use the shared folder as they always do: open files, edit them, save them. Meanwhile, the server is automatically versioning everything.

    <Location /repos>
      DAV svn
      SVNPath /path/to/repository
      SVNAutoversioning on
      ModMimeUsePathInfo on
    </Location>

ModMimeUsePathInfo allows mod_mime to attempt automatic deduction of the mime-type on new files that enter the repository via autoversioning. The module looks at the file's named extension and possibly the contents as well; if the file matches some common patterns, then the the file's svn:mime-type property will be set automatically
file:///svn.webdav.autoversioning.html


* client conf file .subversion/servers
file:///svn.advanced.confarea.html
two special section names in this file-groups and global. 

    [groups]
    beanie-babies = *.red-bean.com
    collabnet = svn.collab.net
    [beanie-babies]
    ssl-authority-files = ...
    http-proxy-host = ...
    [collabnet]
    Åc

* client conf file .subversion/config
file:///svn.advanced.confarea.html
contains the rest of the currently available Subversion run-time options, those not related to networking.

    [auth]
    store-passwords = yes
    [helpers]
    editor-cmd = vim
    [miscellany]
    global-ignores = *.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store
    enable-auto-props = no
    [auto-props]
    *.sh  = svn:eol-style=native;svn:executable;...
    *.fla = svn:needs-lock=1
    # make sure to set [miscellany] > enable-auto-props to yes


* svn blame
Show author and revision information in-line for the specified files or URLs.
file:///svn.ref.svn.c.blame.html

    $ svn blame http://svn.red-bean.com/repos/test/readme.txt
         3      sally This is a README file.
         5      harry You should read this.


* svn cleanup
Recursively clean up the working copy, removing working copy locks and resuming unfinished operations. If you ever get a "working copy locked" error, run this command to remove stale locks and get your working copy into a usable state again.
file:///svn.ref.svn.c.blame.html


* subversion properties
file:///svn.ref.properties.html

    # versioned
    svn:executable
    svn:mime-type
    svn:ignore
    svn:keywords
    svn:eol-style
    svn:externals
    svn:special
    svn:needs-lock
    
    # unversioned
    svn:author
    svn:date
    svn:log
    svn:autoversioned


* rewriting commit log
file:///svn.ref.svn.c.propset.html

    $ svn propset --revprop -r 25 svn:log "my new log message"

By default, you cannot modify revision properties in a Subversion repository. Your repository administrator must explicitly enable revision property modifications by creating a hook named pre-revprop-change.


* svn status
see below page for each status characters [M|C|D|A|...]
file:///svn.ref.svn.c.status.html


* svnadmin create
As of Subversion 1.2, svnadmin creates new repositories with the fsfs filesystem backend by default.
file:///svn.ref.svnadmin.c.create.html

    $ svnadmin create /usr/local/svn/repos

* svnadmin dump
The first is the --incremental option, which simply causes that first revision in the dumpfile stream to contain only the files and directories modified in that revision, instead of being presented as the addition of a new tree, and in exactly the same way that every other revision in the dumpfile is presented. This is useful for generating a relatively small dumpfile to be loaded into another repository which already has the files and directories that exist in the original repository.

    $ svnadmin dump --incremental > myrepos.200801.dump

Use svnadmin load to recover from dump file.
file:///svn.ref.svnadmin.c.dump.html

* svnadmin hotcopy
This subcommand makes a full ÅghotÅh backup of your repository, including all hooks, configuration files, and, of course, database files. If you pass the --clean-logs option, svnadmin will perform a hotcopy of your repository, and then remove unused Berkeley DB logs from the original repository. You can run this command at any time and make a safe copy of the repository, regardless of whether other processes are using the repository.

    $ svnadmin hotcopy ./myrepos ./myrepos-bkup

file:///svn.ref.svnadmin.c.hotcopy.html


* svnadmin [ls|rm]locks
lslocks - Print descriptions of all locks in a repository.

    $ svnadmin lslocks /svn/repos

rmlocks - Unconditionally remove one or more locks from a repository.

    $ svnadmin rmlocks /svn/repos tree.jpg house.jpg

file:///svn.ref.svnadmin.c.lslocks.html


* svnadmin verify
Run this command if you wish to verify the integrity of your repository. If this command fails - which it will do at the first sign of a problem?that means that your repository has at least one corrupted revision and you should restore the corrupted revision from a backup.

    $ svnadmin verify /usr/local/svn/repos/

file:///svn.ref.svnadmin.c.verify.html


* svnlook changed
Print the paths that were changed in a particular revision or transaction, as well as Ågsvn update-styleÅh status letters in the first two columns.

    $ svnlook changed -r 39 /usr/local/svn/repos
    A   trunk/vendors/deli/
    A   trunk/vendors/deli/chips.txt
    A   trunk/vendors/deli/sandwich.txt
    ...

file:///svn.ref.svnlook.c.changed.html


* svnlook dirs-changed
Print the directories that were themselves changed (property edits) or whose file children were changed.

    $ svnlook dirs-changed -r 40 /usr/local/svn/repos
    trunk/vendors/deli/

file:///svn.ref.svnlook.c.dirs-changed.html


* svnlook history
Print information about the history of a path in the repository (or the root directory if no path is supplied).

    $ svnlook history -r 20 /usr/local/svn/repos /tags/1.0 --show-ids
    REVISION   PATH <ID>
    --------   ---------
          19   /tags/1.0 <1.2.12>
          17   /branches/1.0-rc2 <1.1.10>
          16   /branches/1.0-rc2 <1.1.x>
          14   /trunk <1.0.q>

file:///svn.ref.svnlook.c.history.html


* commit hooks - pre-revprop-change
Unlike the other hooks, the default state of this one is to deny the proposed action. The hook must actually exist and return a zero exit value before a revision property modification can happen.

You will need to create your own hook for use with `svnsync initialize`.

    $ svnsync initialize file:///opt/svn/repos-mirror \
    http://svn.example.com/repos
    svnsync: Repository has not been enabled to accept revision propchanges;
    ask the administrator to create a pre-revprop-change hook

file:///svn.ref.reposhooks.pre-revprop-change.html


* using autoprops
You cannot default set some property on server side repository. so you must deliver your custom .subversion/config file to all of your member manually.
No, the server can't transmit them to clients. Maybe in the future.
http://bradchoate.com/weblog/2006/07/27/oscon-subversion-best-practices
